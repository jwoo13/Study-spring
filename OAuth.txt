OAuth 란 제 3의 서비스에 계정 관리를 맡기는 방식

OAuth를 사용하면 인증 서버에서 발급받은 토큰을 사용해서 리소스 서버에 리소스 오너의 정보를 요청하고 응답받아 사용할 수 있음 
클라이언트는 어떻게 리소스 오너의 정보를 취득하는가는 방법 4가지

1.권한 부여 코드 승인 타입
-클라이언트가 리소스에 접근하는 데 사용하며,권한에 접근할 수 있는 코드와 리소스 오너에 대한 액세스 토큰을 발급하는 방식

2.암시적 승인 타입
-서버가 없는 자바스크립트 웹 애플리케이션 클라이언트에서 주료 사용하는 방법
클라이언트가 요청을 보내면 리소스 오너의 인증 과정 이외에는 권한 코드 교환 등의 별다른 인증 과정을 거치지 않고 액세스 토큰을 제공하는 방식

3.리소스 소유자 암호 자격증명 타입
-클라이언트의 패스워드를 이용해 액세스 토큰에 대한 사용자의 자격 증명을 교환하는 방식

4.클라이언트 자격증명 승인 타입
-클라이언트가 컨텍스트 외부에서 액세스 토큰을 얻어 특정 리소스에 접근을 요청할 때 사용하는 방식

여기서 쓸건 권한 부여 코드 승인 타입
이 방법이 서비스에서 가장 중요한 정보인 사용자 데이터가 외부로 전송되지 않아 안전하고
OAuth에서 가장 잘 알려진 인증 방법임


권한 부여 코드 승인 타입이란
이걸 이해하기 위해 애플리케이션,리소스 오너(사용자),리소스 서버, 인증 서버가 어떤 순서로 인증 하는지 알아야함

1.권한 요청(리소스 오너가 애플리케이션으로)

2.데이터 접근용 권한 부여(리소스 서버가 리소스 오너로)

3.인증 코드 발급(애플리케이션이 인증 서버로)

4.액세스 토큰으로 발급(애플리케이션이 인증 서버로)

5.액세스 토큰으로 데이터에 접근(애플리케이션에서 리소스 서버로)

리소스 서버에서 인증 서버로 인증서버에 인증 작업 위임

권한 요청
-권한 요청은 클라이언트, 즉 스프링 부트 서버가 특정 사용자 데이터에 접근하기 위해 권한 서버,즉 카카오나 구글 권한 서버에 요청을 보내는 것
요청 URI는 권한 서버마다 다르지만 보통은 클라이언트 ID,리다이렉트 URI,응답 타입 등을 파라미터로 보냄
실제 요청에 쓰이는 요청 URI를 통해 주요 파라미터를 알아보자
권한 요청 파라미터 예)
GET spring-authorization-server.example/authorize?
	client id =66z36b4c2&
	redirect_url=http://localhost:8080/myapp&
	response_type=code&
	scope=profile

clien_id
인증 서버가 클라이언트에 할당한 고유 식별자
이 값은 클라이언트 애플리케이션을 OAuth 서비스에 등록할 때 서비스에서 생성하는 값이다

redirect_uri
로그인 성공 시 이동해야 하는 URI이다

response_type
클라이언트가 제공받길 원하는 응답 타입 . 인증 코드를 받을 때는 code값을 포함해야함

scope
제공받고자 하는 리소스 오너의 정보 목록



데이터 접근용 권한 부여
인증 서버에 요청을 처음 보내는 경우 사용자에게 보이는 페이지를 로그인 페이지로 변경하고 사용자의 데이터에 접근 동의를 얻는다 이 과정은 최초 1회만 진행된다.
이후에는 인증 서버에서 동의 내용을 저장하고 있기 때문에 로그인만 진행하면 된다.
로그인이 성공되면 권한 부여 서버는 데이터에 접근할 수 있게 인증 및 권한 부여를 수신함

인증 코드 제공
사용자가 로그인에 성공하면 권한 요청 시에 파라미터로 보낸 redirect_uri로 리다이렉션된다.
이때 파라미터에 인증 코드를 함께 제공
예) GET http://localhost:8080/myapp?code=a1s2f3mcj2

액세스 토큰 응답
인증 코드를 받으면 액세스 토큰으로 교환해야 한다.
액세스 토큰은 로그인 세션에 대한 보안자격을 증명하는 식별 코드를 의미한다
보통 아래와 같이 /token POST 요청을 보냄

POST spring-authorization-server.example.com/token
{
	"client id" ="66z36b4c2",
	"cilent_secret":"aabb11dd44"
	"redirect_url"="http://localhost:8080/myapp",
	"grant_type": "authorization_code",
	"code": "a1b2c3d4e5f6g7h8"
}

client_secret
OAuth 서비스에 등록할 때 제공받는 비밀키

grant_type
권한 유형을 확인하는데 사용합니다.이때는 authorization_code로 설정해야 한다.
권한 서버는 요청 값을 기반으로 유효한 정보인지 확인하고 , 유효한 정보라면 액세스 토큰을 응답함

액세스 토큰 응답 값 예)
{
	"access_token" : "aasdffb"
	"token_type: "Bearer",
	"expires_in": 3600,
	"scope" : "openid profile",
	..생략
}

액세스 토큰으로 API 답 & 반환
이제 제공받은 액세스 토큰으로 리소스 오너의 정보를 가져올 수 있다.
정보가 필요할 때마다 API 호출을 통해 정보를 가져오고 리소스 서버는 토큰이 유효한지 검사한 뒤에 응답함
리소스 오너의 정보를 가져오기 위한 요청 예)
GET spring-authorization-resource-server.example.com/userinfo
Header: Authorization: Bearer aasdffb

여기까지가 권한 부여 코드 승인 타입의 흐름이다
대부분의 OAuth를 구현한 라이브러리는 이 흐름을 바탕으로 구현함




쿠키란 사용자가 어떠한 웹 사이트를 방문했을 때 웹사이트가 사용한느 서버에서 여러분의 로벌 환경에 저장하는 작은 데이터를 의미
이 값이 있기 때문에 이전에 방문한 적이 있는지 알 수 있고  이전에 로그인을 했다면 로그인 정보도 유지할 수 있다.
쿠키는 키와 값으로 이루어져있으며 만료 기간,도메인 등의 정보를 가지고 있다,
HTTP 요청을 통해 쿠키의 특정 키에 값을 추가할 수 있다
과정은

1.브라우저에서 요청 (서버로) GET /members

2.서버에서 쿠키 설정 (서버에서 브라우저로 set-cookie:member_id=1)

3.브라우저에 쿠키 저장 (서버로 GET /members,Cookie:member_id = 1)

클라이언트가 정보를 요청하면 서버에서 정보를 값으로 넣은 쿠키를 생성해서 요청한 정보 즉 HTTP 헤더와 함께 돌려보낸다
그러면 클라이언트는 로컬,즉 브라우저에 쿠키를 저장한다
이후 사이트에 재방문할때는 사용자가 로컬 환경에 있는 쿠키와 함께 서버에 요청함
이렇게 하면 클라이언트에 값을 저장할 수 있기 때문에 현재 사용자에 관련된 정보를 보여줄 수 있다

클라이언트 ID
1045481394525-gra6e5eavb23bm07s3f07b87b8ru82q7.apps.googleusercontent.com

클라이언트 보안 비밀번호
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



스프링 시큐리티로 OAuth2 구현하고 적용하기
가장 먼저 쿠키 관리 클래스를 구현하고 , OAuth2에서 제공받은 인증 객체로 사용자 정보를 가져오는 역할을 하는 서비스를 구현
그 뒤에는 WebSecurityConfig 클래스 대신 사용할 OAuth2 설정 파일을 구현

